name: Build ImmortalWrt

on:
  workflow_dispatch:
  schedule:
    - cron: ${{ env.SCHEDULE_CRON }}

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  BRANCH: master
  CONFIG_URL: https://raw.githubusercontent.com/lonelysoul/immortalwrt/refs/heads/main/.config
  BUILD_DIR: immortalwrt
  ARTIFACTS_PATH: bin/targets/x86/64
  MAX_RELEASES: 7
  SCHEDULE_CRON: '0 0 * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
    - name: Checkout current repo
      uses: actions/checkout@v4

    - name: Find and link largest partition
      run: |
        # 查找可用空间最大的分区
        target_part=$(df -k --output=target,avail | 
          awk 'NR>1 {print $0}' | 
          sort -nrk2 | 
          head -1 | 
          awk '{print $1}')
        
        echo "Linking workspace to: $target_part"
        sudo mkdir -p "$target_part/$BUILD_DIR"
        sudo chown -R runner:runner "$target_part/$BUILD_DIR"
        ln -s "$target_part/$BUILD_DIR" $BUILD_DIR

    - name: Clone upstream repository
      run: |
        git clone --depth 1 --branch $BRANCH $REPO_URL $BUILD_DIR

    - name: Apply custom config
      run: |
        curl -L -o $BUILD_DIR/.config $CONFIG_URL

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt full-upgrade -y
        sudo apt-get install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential   bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib   g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev   libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev  libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano   ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils   python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs   upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd

    - name: Build firmware
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        make defconfig
        make -j$(($(nproc) + 1)) download
        make -j$(nproc)

    - name: Upload artifacts to Release
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.BUILD_DIR }}/${{ env.ARTIFACTS_PATH }}/*
        tag_name: build-${{ github.run_number }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Clean old releases
      run: |
        gh release list --limit 100 | awk '{print $2}' | tail -n +$((MAX_RELEASES + 1)) | 
        xargs -I {} gh release delete {} --yes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MAX_RELEASES: ${{ env.MAX_RELEASES }}

    - name: Telegram notification
      if: success()
      run: |
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="✅ Build succeeded! ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
